
package GUIQytetet;

import com.sun.glass.events.KeyEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import modeloqytetec.Calle;
import modeloqytetec.Casilla;
import modeloqytetec.MetodoSalirCarcel;
import modeloqytetec.Qytetet;
import modeloqytetec.TipoCasilla;

/**
 * @author Jorge Valenzuela Garcia
 */
public class ControladorQytetet extends javax.swing.JFrame {
    
    // ATRIBUTO DE INSTANCIA
    Qytetet modeloqytetet;

    
    // METODOS
    public ControladorQytetet(){
        initComponents();
    }
    
    
    public void actualizar(Qytetet qytetet){
        modeloqytetet = Qytetet.getInstance();
    }
    
    public void habilitarComenzarTurno(){
        this.botonComprar.setEnabled(false);
        this.botonPasarTurno.setEnabled(false);
        this.botonAplicarSorpresa.setEnabled(false);
        this.botonVender.setEnabled(false);
        this.botonEdificarCasa.setEnabled(false);
        this.botonEdificarHotel.setEnabled(false);
        this.botonHipotecar.setEnabled(false);
        this.botonCancelarHipoteca.setEnabled(false);
        if(modeloqytetet.getJugadorActual().getEncarcelado()){
            this.botonIntentarSalirCarcel.setEnabled(true);
            this.botonIntentarSalirCarcelDado.setEnabled(true);
        }
        else{
            this.botonJugar.setEnabled(true);
            this.botonIntentarSalirCarcel.setEnabled(false);
            this.botonIntentarSalirCarcelDado.setEnabled(false);
            if(modeloqytetet.getJugadorActual().tengoPropiedades()){
                this.botonVender.setEnabled(true);
                this.botonEdificarCasa.setEnabled(true);
                this.botonEdificarHotel.setEnabled(true);
                this.botonHipotecar.setEnabled(true);
                this.botonCancelarHipoteca.setEnabled(true);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vistaQytetet = new GUIQytetet.VistaQytetet();
        botonIntentarSalirCarcel = new javax.swing.JButton();
        botonJugar = new javax.swing.JButton();
        botonComprar = new javax.swing.JButton();
        botonAplicarSorpresa = new javax.swing.JButton();
        botonIntentarSalirCarcelDado = new javax.swing.JButton();
        botonPasarTurno = new javax.swing.JButton();
        separador = new javax.swing.JSeparator();
        botonVender = new javax.swing.JButton();
        botonEdificarCasa = new javax.swing.JButton();
        botonEdificarHotel = new javax.swing.JButton();
        botonHipotecar = new javax.swing.JButton();
        botonCancelarHipoteca = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonIntentarSalirCarcel.setText("Intentar Salir Carcel Pagando");
        botonIntentarSalirCarcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIntentarSalirCarcelActionPerformed(evt);
            }
        });

        botonJugar.setText("Jugar");
        botonJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonJugarActionPerformed(evt);
            }
        });

        botonComprar.setText("Comprar");
        botonComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonComprarActionPerformed(evt);
            }
        });

        botonAplicarSorpresa.setText("Aplicar Sorpresa");
        botonAplicarSorpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAplicarSorpresaActionPerformed(evt);
            }
        });

        botonIntentarSalirCarcelDado.setText("Intentar Salir Carcel Tirando Dado");
        botonIntentarSalirCarcelDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIntentarSalirCarcelDadoActionPerformed(evt);
            }
        });

        botonPasarTurno.setText("Pasar Turno");
        botonPasarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPasarTurnoActionPerformed(evt);
            }
        });

        botonVender.setText("Vender");
        botonVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVenderActionPerformed(evt);
            }
        });

        botonEdificarCasa.setText("Edificar Casa");
        botonEdificarCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEdificarCasaActionPerformed(evt);
            }
        });

        botonEdificarHotel.setText("Edificar Hotel");
        botonEdificarHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEdificarHotelActionPerformed(evt);
            }
        });

        botonHipotecar.setText("Hipotecar");
        botonHipotecar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonHipotecarActionPerformed(evt);
            }
        });

        botonCancelarHipoteca.setText("Cancelar Hipoteca");
        botonCancelarHipoteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarHipotecaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separador, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vistaQytetet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 36, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(botonJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(botonIntentarSalirCarcel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonPasarTurno)
                        .addGap(43, 43, 43)
                        .addComponent(botonIntentarSalirCarcelDado)
                        .addGap(28, 28, 28)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonEdificarCasa)
                        .addGap(34, 34, 34)
                        .addComponent(botonHipotecar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonVender, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonEdificarHotel)
                        .addGap(18, 18, 18)
                        .addComponent(botonCancelarHipoteca, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(botonAplicarSorpresa)
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vistaQytetet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonIntentarSalirCarcel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonIntentarSalirCarcelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonPasarTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonComprar)
                            .addComponent(botonEdificarCasa)
                            .addComponent(botonHipotecar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonVender)
                            .addComponent(botonEdificarHotel)
                            .addComponent(botonCancelarHipoteca)))
                    .addComponent(botonAplicarSorpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonIntentarSalirCarcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIntentarSalirCarcelActionPerformed
        System.out.println("Soy el boton para intentar salir de la carcel");
        boolean resultado = modeloqytetet.intentarSalirCarcel(MetodoSalirCarcel.PAGANDOLIBERTAD);
        this.botonIntentarSalirCarcel.setEnabled(false);
        this.botonIntentarSalirCarcelDado.setEnabled(false);
        if(resultado){
            JOptionPane.showMessageDialog(this, "Sales de la cárcel");
            this.botonJugar.setEnabled(true);
            }
        else{
            JOptionPane.showMessageDialog(this, "NO sales de la cárcel");
            this.botonPasarTurno.setEnabled(true);
        }
        this.vistaQytetet.actualizar(modeloqytetet);
    }//GEN-LAST:event_botonIntentarSalirCarcelActionPerformed

    private void botonAplicarSorpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAplicarSorpresaActionPerformed
        System.out.println("Soy el boton de aplicar sorpresa");
        modeloqytetet.aplicarSorpresa();
        this.vistaQytetet.actualizar(modeloqytetet);
        this.vistaQytetet.limpiarVistaSorpresa();
        this.botonAplicarSorpresa.setEnabled(false);
        this.botonPasarTurno.setEnabled(true);
        JOptionPane.showMessageDialog(this, this.modeloqytetet.getCartaActual().toString());
    }//GEN-LAST:event_botonAplicarSorpresaActionPerformed

    private void botonPasarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPasarTurnoActionPerformed
        System.out.println("Soy el boton de pasar turno");
        modeloqytetet.siguienteJugador();
        this.botonJugar.setEnabled(true);
        this.botonPasarTurno.setEnabled(false);
        this.habilitarComenzarTurno();
        this.vistaQytetet.actualizar(modeloqytetet);
    }//GEN-LAST:event_botonPasarTurnoActionPerformed

    private void botonComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonComprarActionPerformed
        System.out.println("Soy el botón de intentar COMPRAR");
        int decision = JOptionPane.showConfirmDialog(null, "¿Desea comprar esta propiedad?\nSu saldo es: " + this.modeloqytetet.getJugadorActual().getSaldo(), "Menu de Compra", JOptionPane.YES_NO_OPTION);
        
        if (decision == JOptionPane.YES_OPTION){
            this.botonComprar.setEnabled(false);
            boolean comprado = this.modeloqytetet.comprarTituloPropiedad();
            this.vistaQytetet.actualizar(this.modeloqytetet);
            
            if(comprado)
                JOptionPane.showMessageDialog(this, "Has comprado la propiedad");
        }
        
        
    }//GEN-LAST:event_botonComprarActionPerformed

    private void botonIntentarSalirCarcelDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIntentarSalirCarcelDadoActionPerformed
        System.out.println("Soy el boton de LANZAR DADO");
        boolean libertad = modeloqytetet.intentarSalirCarcel(MetodoSalirCarcel.TIRANDODADO);
        
        this.botonIntentarSalirCarcel.setEnabled(false);
        this.botonIntentarSalirCarcelDado.setEnabled(false);
        if(libertad){
            JOptionPane.showMessageDialog(this, "Sales de la cárcel");
            this.botonJugar.setEnabled(true);
        }
        else{
            JOptionPane.showMessageDialog(this, "NO sales de la cárcel");
            this.botonPasarTurno.setEnabled(true);
        }
        this.vistaQytetet.actualizar(modeloqytetet);
    }//GEN-LAST:event_botonIntentarSalirCarcelDadoActionPerformed

    private void botonJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonJugarActionPerformed
        System.out.println("Soy el boton de JUGAR");
        this.vistaQytetet.actualizar(modeloqytetet);
        boolean tienePropietario = modeloqytetet.jugar();
        this.botonJugar.setEnabled(false);
        this.botonVender.setEnabled(false);
        this.botonEdificarCasa.setEnabled(false);
        this.botonEdificarHotel.setEnabled(false);
        this.botonHipotecar.setEnabled(false);
        this.botonCancelarHipoteca.setEnabled(false);
        this.botonPasarTurno.setEnabled(true);
        
        if(modeloqytetet.getJugadorActual().getCasillaActual().getTipo().equals(TipoCasilla.CALLE) && !tienePropietario){
            this.botonComprar.setEnabled(true);
        }
        
        if(modeloqytetet.getJugadorActual().getCasillaActual().getTipo().equals(TipoCasilla.SORPRESA)){
            this.vistaQytetet.actualizarVistaSorpresa(modeloqytetet);
            this.botonPasarTurno.setEnabled(false);
            this.botonAplicarSorpresa.setEnabled(true);
        }
        
        this.vistaQytetet.actualizar(modeloqytetet);
    }//GEN-LAST:event_botonJugarActionPerformed

    private void botonVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVenderActionPerformed
        System.out.println("Soy el boton de VENDER");
        ArrayList<Casilla> casillasPropiedad = this.modeloqytetet.propiedadesHipotecadasJugador(false);
        
        if(casillasPropiedad.size() > 0){
        
            ArrayList<String> nombres = new ArrayList();
            for(Casilla casilla : casillasPropiedad){
                Calle calle = (Calle) casilla;
                nombres.add(calle.getTitulo().toStringNombre());
            }
       
            String[] propiedades = new String[nombres.size()];
            propiedades = nombres.toArray(propiedades);
            String eleccion = (String)JOptionPane.showInputDialog(this, "Elige una de tus propiedades", "Venta de propiedades", JOptionPane.QUESTION_MESSAGE,  null, propiedades, propiedades[0]);
        
            int eleccionPosicion = -1;
            for(int i = 0; i < nombres.size(); i++){
                if (nombres.get(i).equals(eleccion))
                    eleccionPosicion = i;
            }
                  
            // Si la eleccion es -1 es porque se ha cancelado la venta
            if(eleccionPosicion != -1){
                this.modeloqytetet.venderPropiedad(casillasPropiedad.get(eleccionPosicion));
                JOptionPane.showMessageDialog(this, "Has vendido la propiedad elegida");
            }
        }
        
        this.vistaQytetet.actualizar(this.modeloqytetet);
        
    }//GEN-LAST:event_botonVenderActionPerformed

    private void botonEdificarCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEdificarCasaActionPerformed
        System.out.println("Soy el boton de EDIFICAR CASA");
        ArrayList<Casilla> casillasPropiedad = this.modeloqytetet.propiedadesHipotecadasJugador(false);
        
        if(casillasPropiedad.size() > 0){
            ArrayList<String> nombres = new ArrayList();
            for(Casilla casilla : casillasPropiedad){
                Calle calle = (Calle) casilla;
                nombres.add(calle.getTitulo().toStringNombre());
            }
       
            String[] propiedades = new String[nombres.size()];
            propiedades = nombres.toArray(propiedades);
            String eleccion = (String)JOptionPane.showInputDialog(this, "Elige una de tus propiedades", "Edificación de casas", JOptionPane.QUESTION_MESSAGE,  null, propiedades, propiedades[0]);
        
            int eleccionPosicion = -1;
            for(int i = 0; i < nombres.size(); i++){
                if (nombres.get(i).equals(eleccion))
                    eleccionPosicion = i;
            }
        
            // Si la eleccion es -1 es porque se ha cancelado la venta
            boolean construido = false;
            if(eleccionPosicion != -1){
                construido = this.modeloqytetet.edificarCasa(casillasPropiedad.get(eleccionPosicion));
                if(construido)
                    JOptionPane.showMessageDialog(this, "Has construido una casa");
                else
                    JOptionPane.showMessageDialog(this, "No puedes construir mas casas en esta propiedad");
            }
        }
        
        this.vistaQytetet.actualizar(this.modeloqytetet);
    }//GEN-LAST:event_botonEdificarCasaActionPerformed

    private void botonEdificarHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEdificarHotelActionPerformed
        System.out.println("Soy el boton de EDIFICAR HOTEL");
        ArrayList<Casilla> casillasPropiedad = this.modeloqytetet.propiedadesHipotecadasJugador(false);
        
        if(casillasPropiedad.size() > 0){
            ArrayList<String> nombres = new ArrayList();
            for(Casilla casilla : casillasPropiedad){
                Calle calle = (Calle) casilla;
                nombres.add(calle.getTitulo().toStringNombre());
            }
       
            String[] propiedades = new String[nombres.size()];
            propiedades = nombres.toArray(propiedades);
            String eleccion = (String)JOptionPane.showInputDialog(this, "Elige una de tus propiedades", "Edificación de hoteles", JOptionPane.QUESTION_MESSAGE,  null, propiedades, propiedades[0]);
        
            int eleccionPosicion = -1;
            for(int i = 0; i < nombres.size(); i++){
                if (nombres.get(i).equals(eleccion))
                    eleccionPosicion = i;
            }
        
            // Si la eleccion es -1 es porque se ha cancelado la venta
            boolean construido = false;
            if(eleccionPosicion != -1){
                construido = this.modeloqytetet.edificarHotel(casillasPropiedad.get(eleccionPosicion));
                if(construido)
                    JOptionPane.showMessageDialog(this, "Has construido un hotel");
                else
                    JOptionPane.showMessageDialog(this, "No puedes construir hoteles en esta propiedad porque, o bien no tienes todas las casas construidas, o bien no puedes construir más hoteles en esta propiedad");
            }
        }
        
        this.vistaQytetet.actualizar(this.modeloqytetet);
        
    }//GEN-LAST:event_botonEdificarHotelActionPerformed

    private void botonHipotecarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonHipotecarActionPerformed
        System.out.println("Soy el boton de HIPOTECAR");
        
        ArrayList<Casilla> casillasPropiedad = this.modeloqytetet.propiedadesHipotecadasJugador(false);
        
        if(casillasPropiedad.size() > 0){
            ArrayList<String> nombres = new ArrayList();
            for(Casilla casilla : casillasPropiedad){
                Calle calle = (Calle) casilla;
                nombres.add(calle.getTitulo().toStringNombre());
            }
       
            String[] propiedades = new String[nombres.size()];
            propiedades = nombres.toArray(propiedades);
            String eleccion = (String)JOptionPane.showInputDialog(this, "Elige una de tus propiedades", "Hipotecar propiedad", JOptionPane.QUESTION_MESSAGE,  null, propiedades, propiedades[0]);
        
            int eleccionPosicion = -1;
            for(int i = 0; i < nombres.size(); i++){
                if (nombres.get(i).equals(eleccion))
                    eleccionPosicion = i;
            }
        
            // Si la eleccion es -1 es porque se ha cancelado la venta
            boolean construido = false;
            if(eleccionPosicion != -1){
                construido = this.modeloqytetet.hipotecarPropiedad(casillasPropiedad.get(eleccionPosicion));
                if(construido)
                    JOptionPane.showMessageDialog(this, "Has hipotecado tu propiedad");
                else
                    JOptionPane.showMessageDialog(this, "No puedes hipotecar esta propiedad, ya está hipotecada");
            }
        }
        
        this.vistaQytetet.actualizar(this.modeloqytetet);
    }//GEN-LAST:event_botonHipotecarActionPerformed

    private void botonCancelarHipotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarHipotecaActionPerformed
        System.out.println("Soy el boton de CANCELAR HIPOTECA");
        
        ArrayList<Casilla> casillasPropiedad = this.modeloqytetet.propiedadesHipotecadasJugador(true);
        
        if(casillasPropiedad.size() > 0){
            ArrayList<String> nombres = new ArrayList();
            for(Casilla casilla : casillasPropiedad){
                Calle calle = (Calle) casilla;
                nombres.add(calle.getTitulo().toStringNombre());
            }
       
            String[] propiedades = new String[nombres.size()];
            propiedades = nombres.toArray(propiedades);
            String eleccion = (String)JOptionPane.showInputDialog(this, "Elige una de tus propiedades", "Cancelar hipoteca", JOptionPane.QUESTION_MESSAGE,  null, propiedades, propiedades[0]);
        
            int eleccionPosicion = -1;
            for(int i = 0; i < nombres.size(); i++){
                if (nombres.get(i).equals(eleccion))
                    eleccionPosicion = i;
            }
        
            // Si la eleccion es -1 es porque se ha cancelado la venta
            boolean construido = false;
            if(eleccionPosicion != -1){
                construido = this.modeloqytetet.cancelarHipoteca(casillasPropiedad.get(eleccionPosicion));
                if(construido)
                    JOptionPane.showMessageDialog(this, "Vuelves a tener tu propiedad");
                else
                    JOptionPane.showMessageDialog(this, "No puedes cancelar la hipoteca de esta propiedad");
            }
        }
        
        this.vistaQytetet.actualizar(this.modeloqytetet);
        
    }//GEN-LAST:event_botonCancelarHipotecaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        
       // CREAMOS LA VISTA DEL JUEGO
       ControladorQytetet controladorQytetet = new ControladorQytetet();
       controladorQytetet.setVisible(true);
       
       // CREAMOS EL DADO
       Dado.createInstance(controladorQytetet);
            
       // OBTENEMOS LOS NOMBRES DE LOS JUGADORES
       CapturaNombreJugadores capturaNombres = new CapturaNombreJugadores(controladorQytetet, true);
       ArrayList<String> nombres = capturaNombres.obtenerNombres();
       
        // INICIALIZAMOS EL JUEGO
       controladorQytetet.actualizar(controladorQytetet.modeloqytetet);
       controladorQytetet.modeloqytetet.inicializarJuego(nombres);
       controladorQytetet.vistaQytetet.actualizar(controladorQytetet.modeloqytetet);
       controladorQytetet.habilitarComenzarTurno();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAplicarSorpresa;
    private javax.swing.JButton botonCancelarHipoteca;
    private javax.swing.JButton botonComprar;
    private javax.swing.JButton botonEdificarCasa;
    private javax.swing.JButton botonEdificarHotel;
    private javax.swing.JButton botonHipotecar;
    private javax.swing.JButton botonIntentarSalirCarcel;
    private javax.swing.JButton botonIntentarSalirCarcelDado;
    private javax.swing.JButton botonJugar;
    private javax.swing.JButton botonPasarTurno;
    private javax.swing.JButton botonVender;
    private javax.swing.JSeparator separador;
    private GUIQytetet.VistaQytetet vistaQytetet;
    // End of variables declaration//GEN-END:variables
}
